// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/provider.go

// Package authmocks is a generated GoMock package.
package authmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/sema0205/avito-backend-assignment-2024/pkg/auth"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// NewAdminJWT mocks base method.
func (m *MockProvider) NewAdminJWT(adminId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAdminJWT", adminId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAdminJWT indicates an expected call of NewAdminJWT.
func (mr *MockProviderMockRecorder) NewAdminJWT(adminId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAdminJWT", reflect.TypeOf((*MockProvider)(nil).NewAdminJWT), adminId)
}

// NewUserJWT mocks base method.
func (m *MockProvider) NewUserJWT(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserJWT", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUserJWT indicates an expected call of NewUserJWT.
func (mr *MockProviderMockRecorder) NewUserJWT(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserJWT", reflect.TypeOf((*MockProvider)(nil).NewUserJWT), userId)
}

// Parse mocks base method.
func (m *MockProvider) Parse(accessToken string) (auth.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", accessToken)
	ret0, _ := ret[0].(auth.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockProviderMockRecorder) Parse(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockProvider)(nil).Parse), accessToken)
}
